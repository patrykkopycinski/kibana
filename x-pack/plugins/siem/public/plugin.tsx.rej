diff a/x-pack/plugins/siem/public/plugin.tsx b/x-pack/plugins/siem/public/plugin.tsx	(rejected hunks)
@@ -12,6 +12,7 @@ import {
   CoreStart,
   PluginInitializerContext,
   Plugin as IPlugin,
+  // eslint-disable-next-line @kbn/eslint/no-restricted-paths
 } from '../../../../src/core/public';
 import {
   HomePublicPluginSetup,
@@ -29,9 +30,15 @@ import {
 } from '../../triggers_actions_ui/public';
 import { SecurityPluginSetup } from '../../security/public';
 import { APP_ID, APP_NAME, APP_PATH, APP_ICON } from '../common/constants';
-import { initTelemetry } from './lib/telemetry';
-import { KibanaServices } from './lib/kibana/services';
-import { serviceNowActionType } from './lib/connectors';
+import { initTelemetry } from './common/lib/telemetry';
+import { KibanaServices } from './common/lib/kibana/services';
+import { serviceNowActionType } from './common/lib/connectors';
+import { Cases } from './cases';
+import { Alerts } from './alerts';
+import { Hosts } from './hosts';
+import { Network } from './network';
+import { Overview } from './overview';
+import { Timelines } from './timelines';
 
 export interface SetupPlugins {
   home: HomePublicPluginSetup;
@@ -61,6 +68,12 @@ export interface PluginStart {}
 
 export class Plugin implements IPlugin<PluginSetup, PluginStart> {
   private kibanaVersion: string;
+  private readonly alertsSubPlugin = new Alerts();
+  private readonly casesSubPlugin = new Cases();
+  private readonly hostsSubPlugin = new Hosts();
+  private readonly networkSubPlugin = new Network();
+  private readonly overviewSubPlugin = new Overview();
+  private readonly timelinesSubPlugin = new Timelines();
 
   constructor(initializerContext: PluginInitializerContext) {
     this.kibanaVersion = initializerContext.env.packageInfo.version;
@@ -85,22 +98,41 @@ export class Plugin implements IPlugin<PluginSetup, PluginStart> {
 
     plugins.triggers_actions_ui.actionTypeRegistry.register(serviceNowActionType());
 
+    const mountSecurityApp = async (params: AppMountParameters) => {
+      const [coreStart, startPlugins] = await core.getStartServices();
+      const { renderApp } = await import('./app');
+      const services = {
+        ...coreStart,
+        ...startPlugins,
+        security: plugins.security,
+      } as StartServices;
+
+      const alertsStart = this.alertsSubPlugin.start();
+      const casesStart = this.casesSubPlugin.start();
+      const hostsStart = this.hostsSubPlugin.start();
+      const networkStart = this.networkSubPlugin.start();
+      const overviewStart = this.overviewSubPlugin.start();
+      const timelinesStart = this.timelinesSubPlugin.start();
+
+      return renderApp(services, params, {
+        routes: [
+          ...alertsStart.routes,
+          ...casesStart.routes,
+          ...hostsStart.routes,
+          ...networkStart.routes,
+          ...overviewStart.routes,
+          ...timelinesStart.routes,
+        ],
+        store: { ...hostsStart.store, ...networkStart.store, ...timelinesStart.store },
+      });
+    };
+
     core.application.register({
       id: APP_ID,
       title: APP_NAME,
       order: 9000,
       euiIconType: APP_ICON,
-      async mount(params: AppMountParameters) {
-        const [coreStart, startPlugins] = await core.getStartServices();
-        const { renderApp } = await import('./app');
-        const services = {
-          ...coreStart,
-          ...startPlugins,
-          security: plugins.security,
-        } as StartServices;
-
-        return renderApp(services, params);
-      },
+      mount: mountSecurityApp,
     });
 
     return {};
